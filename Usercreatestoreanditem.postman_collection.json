{
	"info": {
		"_postman_id": "3bca0a51-62b8-44ed-ad89-3a922019bd43",
		"name": "User create store and item",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User create store and item",
			"item": [
				{
					"name": "/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.clearEnvironmentVariable(\"access_token\")\r",
									"\r",
									"tests[\"Response time is less than 200ms\"] = responseTime<200;\r",
									"\r",
									"var jsondata = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"User created successfully\"] = jsondata.Message === \"User created successfully\";\r",
									"\r",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader('Content-Type') === 'application/json';\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Divya\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\",jsonData.access_token);\r",
									"\r",
									"tests[\"Response time is less than 150ms\"] = responseTime<150;\r",
									"\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"tests[\"Response Body contains access_token\"] = responseBody.has(\"access_token\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Divya\",\r\n    \"password\": \"123456\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/<name>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Store name is returned\"] = jsonData.name === \"test_store\";\r",
									"tests[\"Store id is returned\"] = jsonData.id === 1;\r",
									"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;\r",
									"\r",
									"tests[\"Successful Post request\"] = responseCode.code === 201 ;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime<200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")\r",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";\r",
									"\r",
									"postman.setEnvironmentVariable(\"store_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item/<name>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Item name is returned\"] = jsonData.name === \"test_item\";\r",
									"tests[\"Item price is returned\"] = jsonData.price === 17.99;\r",
									"\r",
									"tests[\"Successful Post request\"] = responseCode.code === 201 ;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime<200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")\r",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 17.99,\r\n    \"store_id\": {{store_id}}\r\n}"
						},
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						}
					},
					"response": []
				},
				{
					"name": "/stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Store 'test_store' is returned\"] = jsonData.stores[0].name === \"test_store\";\r",
									"tests[\"Id of store, 'test_store' is returned\"] = jsonData.stores[0].id === 1;\r",
									"\r",
									"tests[\"Item 'test_item' is returned inside test_store\"] = jsonData.stores[0].items[0].name === \"test_item\";\r",
									"tests[\"Item 'test_item' price is returned inside test_store\"] = jsonData.stores[0].items[0].price === 17.99;\r",
									"\r",
									"tests[\"Successful Get request\"] = responseCode.code === 200 ;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime<200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")\r",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/stores",
							"host": [
								"{{url}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item/<name>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Item 'test_item' is deleted\"] = jsonData.message === \"Item deleted\";\r",
									"\r",
									"tests[\"Successful Delete request\"] = responseCode.code === 200 ;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime<200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")\r",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/<name>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Store 'test_store' is deleted\"] = jsonData.message === \"Store deleted\";\r",
									"\r",
									"tests[\"Successful Delete request\"] = responseCode.code === 200 ;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime<200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")\r",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}